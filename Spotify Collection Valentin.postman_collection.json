{
	"info": {
		"_postman_id": "19c7e2b5-7367-49b9-a219-eb40c8432e70",
		"name": "Spotify Collection Valentin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30187605"
	},
	"item": [
		{
			"name": "Autentificare",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parolaSpotify = pm.response.json();\r",
							"pm.collectionVariables.set(\"tokenSpotify\", parolaSpotify.access_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic ODkwYzFjMTZkMGE5NDQxYmE0Yjg0NGJlNjFiMzBjNjk6NTVhMjJmYWZmNmE1NDFjMzllOTBhYTYxNWIyZWMyZGI=",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{spotify_url}}/api/token/",
					"host": [
						"{{spotify_url}}"
					],
					"path": [
						"api",
						"token",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Generare token Full Rights (ptr user)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://accounts.spotify.com/api/token?client_id=890c1c16d0a9441ba4b844be61b30c69&redirect_uri=http://itfactory/callback&code=AQDqpxQzV6q9-j22myBDdeVIUdPNkC019Om3MReBCPN3k5EVHicP-c--71Prs6w8mkEoKYOToNMkoxZ97VoScdSWlwarbvNaYX1FmfURrMEtoUYEYzxQHcZ7FxPtZP3OUFOLqvpohREzRfSdwH8ll-rma6Wz_tonmBBoq6aH8-7yR0WUQLiOvxnEgPByDTHm1BZVVe8gYUJQGlPn5w144XI3BAzcx-UetS9aY0i5PZStYuvBq4hkptkAetkgj6xqkbY1eao_sKNbHsDlHeyMFUlPdNwRAxVYp4Aj8oOGRSq5AG8bnUkh1onIrE7qWe-hmk7QEntJ_ICDZHeZMOBGxT2jjh5pQ8jG2pANW73d3To35f2iYspGrNTrAmXzaxRlOrPhYllO6Fs4ahcVQjW47et7YL4jvSGWiw46z9tzMVMLKCSSAuxzf83p3VNqf4VsW56YlkDiM0BTQ1krW7hW_H5LzU5HA-iDuAoPRqtCtoNwBRNNIomjWVDT5mF1n_RgFCea-Su-2o0T5pPK_GMGN0EW2eZdWvbp-uZJHpyTw6ExqE_ZyT9V8TnIsCBCVJdsM0eGiF8fp0XSDHvhGUNWjjd_y8WavlfJ74-2s1qcd423SO9ybg0IGmg-P3IyGb8LwlhudYE0oJQbavEmTLecGAZiNTm2vOWZk6bMBtyE2QK3Tt2Y7tnWCZg9uvYRffUG-SQaz10dsNIc-hyjiFQt&client_secret=55a22faff6a541c39e90aa615b2ec2db&grant_type=authorization_code",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					],
					"query": [
						{
							"key": "client_id",
							"value": "890c1c16d0a9441ba4b844be61b30c69"
						},
						{
							"key": "redirect_uri",
							"value": "http://itfactory/callback"
						},
						{
							"key": "code",
							"value": "AQDqpxQzV6q9-j22myBDdeVIUdPNkC019Om3MReBCPN3k5EVHicP-c--71Prs6w8mkEoKYOToNMkoxZ97VoScdSWlwarbvNaYX1FmfURrMEtoUYEYzxQHcZ7FxPtZP3OUFOLqvpohREzRfSdwH8ll-rma6Wz_tonmBBoq6aH8-7yR0WUQLiOvxnEgPByDTHm1BZVVe8gYUJQGlPn5w144XI3BAzcx-UetS9aY0i5PZStYuvBq4hkptkAetkgj6xqkbY1eao_sKNbHsDlHeyMFUlPdNwRAxVYp4Aj8oOGRSq5AG8bnUkh1onIrE7qWe-hmk7QEntJ_ICDZHeZMOBGxT2jjh5pQ8jG2pANW73d3To35f2iYspGrNTrAmXzaxRlOrPhYllO6Fs4ahcVQjW47et7YL4jvSGWiw46z9tzMVMLKCSSAuxzf83p3VNqf4VsW56YlkDiM0BTQ1krW7hW_H5LzU5HA-iDuAoPRqtCtoNwBRNNIomjWVDT5mF1n_RgFCea-Su-2o0T5pPK_GMGN0EW2eZdWvbp-uZJHpyTw6ExqE_ZyT9V8TnIsCBCVJdsM0eGiF8fp0XSDHvhGUNWjjd_y8WavlfJ74-2s1qcd423SO9ybg0IGmg-P3IyGb8LwlhudYE0oJQbavEmTLecGAZiNTm2vOWZk6bMBtyE2QK3Tt2Y7tnWCZg9uvYRffUG-SQaz10dsNIc-hyjiFQt"
						},
						{
							"key": "client_secret",
							"value": "55a22faff6a541c39e90aa615b2ec2db"
						},
						{
							"key": "grant_type",
							"value": "authorization_code"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The total number of tracks is: 18.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.total_tracks).to.eql(18);\r",
							"});\r",
							"\r",
							"pm.test(\"The release date of the album is: 2012-11-16.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.release_date).to.eql('2012-11-16');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the artist has popularity of: 54 followers.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.popularity).to.eql(53);\r",
							"    // Nu exista popularity 54 in raspunsul primit.\r",
							"    // In rest testul este corect, poti incerca cu populariy 53.\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/4aawyAB9vmqN3uQ7FjRGTy?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						"4aawyAB9vmqN3uQ7FjRGTy"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Several Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/albums/?market=ES&ids=7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"albums",
						""
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get New Releases",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"    // API-ul asta nu raspunde niciodata in mai putin de 800ms, cel putin nu la mine :))\r",
							"});\r",
							"\r",
							"pm.test(\"Number of tracks: 9.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.total_tracks).to.eql(10);\r",
							"    //  Aici presupun ca vrei sa vezi cate albume (tracks) au mai mult de 10 piese. Cea ce vrei sa verifici tu e putin mai complicat si trebuie sa ai mult mai multe experienta in Postman ca sa faci un astfel de test. Eu iti dau mai jos un exemplu de cum sa faci acest test dar parerea mea este ca deocamdata sa te rezumi la teste mai simple si dupa ce le stapanesti pe acestea foarte bine sa incerci teste mai complicate.\r",
							"    \r",
							"});\r",
							"pm.test(\"Numărare albume cu mai mult de 10 piese.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var albums = jsonData.albums.items;\r",
							"        //  Salvam lista de albume intr-o variabila numita albums. Aceasta este preluata din cheia 'items' a obiectului 'albums'\r",
							"    var count = 0;\r",
							"        //  Declaram o variabila 'count' sa fie 0. Aceasta va fi folosita pt a numara albumele\r",
							"\r",
							"    for (var i = 0; i < albums.length; i++) {\r",
							"        //  'for' este o structura JavaScript care permite executarea repetata (crearea unei bucle) a unui bloc de cod. 'var i = 0' initializam/declaram o variabila 'i' care va tine evidenta pozitie curente in lista. 'i < albums.length' aceasta este conditia sub care se va executa blocul de cod (adica cat timp nu am ajuns la finalul listei din body).'i++' aceasta incrementeaza cu +1 variabila i de fiecare data cand trece prin bucla\r",
							"        if (albums[i].total_tracks > 10) { \r",
							"            // aici verificam ca numarul total de piese e mai mare de 10\r",
							"            count++;\r",
							"            // daca conditia de mai sus este adevarata creste valoarea variabilei count cu 1\r",
							"        }//aici inchidem blocul if\r",
							"    }//aici inchidem blocul for\r",
							"\r",
							"    console.log('Numărul de albume cu mai mult de 10 piese: ' + count);\r",
							"    // Afiseaza in consola numarul de albume care au mai mult de 10 melodii.\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Album type: compilation.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.albums.items[0].album_type).to.eql('album');\r",
							"    //  In body-ul primit la acest request eu nu am gasit niciun album type = compilation. Dar daca vrei sa faci o verificare pe tipul albumului trebuie sa tii cont ca api-ul de spotify este mai complicat iar raspunsurile primite pt fiecare api contin liste in liste, obiecte, key, etc. In body-ul primit la acest request avem obiectul \"albums\" care contine propietatea/keya items care la randul ei este un array/lista cu mai multe obiecte/dictionare(album_type, artists,etc). Asa ca daca vrem sa accesam obiectul album_type trebuie sa ii aratam calculatorului calea cum sa ajunga la ea (adica sa indexam) asa cum am modificat eu mai sus. Cu jsonData.albums.items[0].album_type = aici i-am spus sa se duca pe obiectul albums apoi pe prima propietate [0] itmes pe obiectul album_type si sa verifice ca este egal cu 'album'\r",
							"});\r",
							"\r",
							"pm.test(\"Available markets: CA.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.albums.items[0].available_markets).to.contain('CA');\r",
							"    //  La fel ca mai sus, trebuie sa ii arati calea catre care available_markets sa mearga si nu putem folosi eql pt ca available_markets contine o lista de tari, asa ca vom folosi contains (adica sa contina ceea ce cautam noi).\r",
							"});\r",
							"\r",
							"// ierarhia acestui body este : \r",
							"// 1.albums\r",
							"    //1.1 album type\r",
							"    //1.2 artists\r",
							"        //1.2.1 external_urls\r",
							"        //1.2.2 href\r",
							"        // etc\r",
							"    //1.3 available_markets\r",
							"// copiaza intregul body intr-un document txt sau intr-un notepad++ si ai sa vezi mai usor ierarhia si cum sa idexezi (sa arati calea)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/new-releases",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"new-releases"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Artist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"One of the genres of music in this album is Pop.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.genres).to.include(\"pop\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the number of followers to be: 10244487.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.followers.total).to.eql(10244487);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the name of the artist to be: Pitbull.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Pitbull\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Artist's Albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300 ms. \", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the first artist name is Pitbull.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].artists[0].name).to.include(\"Pitbull\");\r",
							"    //  Trebuie aratata calea unde sa se duca de la primul element. Gandeste lucrurile ca si cum ai cobora o scara, trebuie sa ii spui fiecare treapa pana sa ajunga la treapta pe care ti-o doresti tu. Body-ul tau contine un array/lista 'itmes', care la randul lui contine un array/lista numit 'artists' care are propietate/cheie 'name'. Aici ii spunem sa intre in prima lista [0] 'items' apoi pe prima lista/array [0] artists si sa acceseze key/propietatea 'name'.\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the first artist name is Nile Rodgers.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].artists[1].name).to.include(\"Nile Rodgers\");\r",
							"    //  Acelasi raspuns ca mai sus doar ca acum il punem sa intre pe a doua lista/array [1] artists\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the album type is: single.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].album_type).to.eql('single');\r",
							"    //  Aici album_type este o propietate/key a listei/array items la fel ca si cheia/propietate 'artists' si de accea o acesam direct din items. Diferenta dintre album_type si artists este ca album_type este o cheie-valoare a lui items pe cand artists este tot o cheie dar care contine o lista (cu chei-valoare) la randul ei\r",
							"});\r",
							"\r",
							"//ierarhia acestui body este :\r",
							"//1. items\r",
							"    //1.1 album_group\r",
							"    //1.2 album_type\r",
							"    //1.3 artists\r",
							"        //1.3.1 external_urls\r",
							"        //1.3.2 href\r",
							"        // etc\r",
							"    //1.4 external_urls\r",
							"    //1.5 id\r",
							"    // etc"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/albums?include_groups=single,appears_on&market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"albums"
					],
					"query": [
						{
							"key": "include_groups",
							"value": "single,appears_on"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Artist's Top Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the total number of tracks is: 16.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks[0].album.total_tracks).to.eql(16);\r",
							"    //  este album nu albums si este tracks nu traks\r",
							"});\r",
							"\r",
							"pm.test(\"YVerify that the duration of the album is: 252306 ms.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks[0].duration_ms).to.eql(252306);//trebuie sa specificam si tracks si sa ii spunem sa intre pe primul obiect/cheie a lui tracks\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the popularity is: 85\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks[0].popularity).to.eql(85);//popularity este o cheie a obiectului tracks\r",
							"});\r",
							"\r",
							"//in acest body ierarhia este aceasta :\r",
							"// 1. tracks\r",
							"    //1.1 album\r",
							"        //1.1.1 album_type\r",
							"        //1.1.2 artists\r",
							"        //1.1.3 external_urls \r",
							"        // etc\r",
							"    //1.2 artists\r",
							"        //1.2.1 external_urls\r",
							"        // etc\r",
							"    //1.3 disc_number\r",
							"    //1.4 duration_ms\r",
							"    //etc"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/top-tracks?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"top-tracks"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Artist's Related Artists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 800ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that one of the genres is: dance pop.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.artists[0].genres).to.include('dance pop');\r",
							"    //  in acest body nu exista obiectul items iar eu nu am gasit genres care sa contina doar cuvantul dance, am gasit care sa contina cheia dance pop. Daca vrei sa iti aduca valoarea de pe o cheie trebuie sa ii dai valoarea intreaga sa o caute, nu doar partial (cum ai facut tu cand ai scris doar dance)\r",
							"});\r",
							"\r",
							"pm.test(\"Check the number of followers is: 8831561.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.artists[0].followers.total).to.eql(8831561);\r",
							"    //  Pentru ca obiectul/cheia followers are la randul ei un lista care are doua chei, trebuie sa ii precizezi valoarea carei chei vrei sa o verifici. Cred ca acest request aduce date diferite de fiecare data, asa ca acest test s-ar putea sa dea mai des eroare pt ca valoarea de pe cheia total al obiectului followers este schimbatoare\r",
							"});\r",
							"\r",
							"//ierarhia acestui body este : \r",
							"//1.artists\r",
							"    //1.1 external_urls\r",
							"    //1.2 followers\r",
							"        //1.2.1 href\r",
							"        //1.2.2 total\r",
							"    // etc"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/artists/0TnOYISbd1XYRBk9myaseg/related-artists",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"artists",
						"0TnOYISbd1XYRBk9myaseg",
						"related-artists"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Audiobook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"// acest API are urmatoarea precizare in documentatie :\"Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.\"Contul tau este pe Romania si acest API nu o sa mearga\r",
							"// este important sa fim foarte atenti la toate detaliile cand citim documentatia\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks/7iHfbu1YPACw6oZPAFJtqe?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks",
						"7iHfbu1YPACw6oZPAFJtqe"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Audiobooks Chapters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"// aceasi problema ca la Get an Audiobook, plus ca la params iti lipsea ID am completat eu informatia dar tot nu o sa mearga"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/audiobooks/7iHfbu1YPACw6oZPAFJtqe/chapters?market=RO&limit=10&offset=5&id=7iHfbu1YPACw6oZPAFJtqe",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"audiobooks",
						"7iHfbu1YPACw6oZPAFJtqe",
						"chapters"
					],
					"query": [
						{
							"key": "market",
							"value": "RO"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						},
						{
							"key": "id",
							"value": "7iHfbu1YPACw6oZPAFJtqe"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Several Browse Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that one of the categories is: dance/electronic.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.categories.items[0].name).to.contains(\"Dance/electronic\");\r",
							"    //trebuia sa precizam sa intre pe prima cheie a obiectului items\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/browse/categories?country=SE&locale=sv_SE&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"browse",
						"categories"
					],
					"query": [
						{
							"key": "country",
							"value": "SE"
						},
						{
							"key": "locale",
							"value": "sv_SE"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Chapter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"//in documentatie apare \"Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.\" contul tau e pe Romania. Plus la params trebuie sa definesti si ID-ul"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/chapters/D5wENdkdwbqlrHoaJ9g29?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"chapters",
						"D5wENdkdwbqlrHoaJ9g29"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "ID",
							"value": "0",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Episode",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 400ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the language is: SV (Swedish).\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.language).to.eql(\"sv\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the release date is:  2015-01-01.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.release_date).to.eql(\"2015-10-01\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the body text of the presentation include:  Radio Play.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Radio Play\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/episodes/512ojhOuo1ktJprKbVcKyQ?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"episodes",
						"512ojhOuo1ktJprKbVcKyQ"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Genre Seeds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that your preferred music style is:  samba. :))\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.genres).to.include(\"samba\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/recommendations/available-genre-seeds",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"recommendations",
						"available-genre-seeds"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Markets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 400ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that one of the available markets is: Romania.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.markets).to.include(\"RO\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/markets",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"markets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Playlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that a word is misspell writen in the text shown to the user: purposes (<> pourposes).\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"pourposes\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the id: 3cEYpjA9oz9GiPac4AsH4n \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.include(\"3cEYpjA9oz9GiPac4AsH4n\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the date when the song has been added to the album: 2015-01-15\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks.items[0].added_at).to.include(\"2015-01-15\");//verifica ierarhia acestui body ca sa intelegi de ce a trebuit sa ii aratam calea ca sa ajunga la added_at (am dat exemple de ierarhie in requesturile anterioare)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "fields",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Playlist Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that a word is misspell writen in the text shown to the user: purposes (<> pourposes).\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"pourposes\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the displayed name: JMPerez² \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.owner.display_name).to.include(\"JMPerez²\");//display_name este o cheie a obiectului owner si trebuie inainte de display_name sa ii precizam obiectul\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the album type: compilation.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks.items[0].track.album.album_type).to.include(\"compilation\");//ierarhia este : avem lista traks care are obiectul items care are obiectul track care are obiectul album care are cheia album_type.\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Playlist Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the limit is 10.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.limit).to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the total number of tracks is 5.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.total).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Playlist Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that among the available markets is Canada (CA).\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.album.available_markets).to.include(\"CA\");\r",
							"    //verifica ierarhia\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the popularitz: 2.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.popularity).to.eql(3);\r",
							"    // vezi ierarhia\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the tracks is 10 has a duration of 3min 16sec.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.duration_ms).to.eql(376000);//vezi ierarhie\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Items to Playlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify th name of the album to be: Progressive Psy Trance Picks Vol.8\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.album.name).to.include(\"Progressive Psy Trance Picks Vol.8\");//ierarhia de verificat\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the name of one of the artists is: Odiseo.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.artists[0].name).to.include(\"Odiseo\");//verifica ierarhia\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the date when the song has been added to the album: 2015-01-15\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].added_at).to.include(\"2015-01-15\");\r",
							"    // trebuia adaugat items, aceasta este ierarhia\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks?position=0",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					],
					"query": [
						{
							"key": "position",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Playlist Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the total number of tracks is 20.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[0].track.album.total_tracks).to.eql(20);\r",
							"    // ierarhia\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the name of the album is: Wellness & Dreaming Source\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.items[1].track.album.name).to.include(\"Wellness & Dreaming Source\");//ierarhia. Aici am precizat ca vreau sa se duca pe al doilea[1] obiect de tipul track. Am spus si la curs ca in lista se incepe numararea de la 0 asa ca atunci cand vrem sa ne ducem pe al doilea element o sa spunem [1]\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/playlists/3cEYpjA9oz9GiPac4AsH4n/tracks",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"playlists",
						"3cEYpjA9oz9GiPac4AsH4n",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search for Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/search?q=remaster%20track:Doxy%20artist:Miles%20Davis&type=album&market=ES&limit=10&offset=5",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "remaster%20track:Doxy%20artist:Miles%20Davis"
						},
						{
							"key": "type",
							"value": "album"
						},
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the language is: SV (Swedish).\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.episodes.items[0].language).to.eql(\"sv\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the release date is:  2023-10-31.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.episodes.items[0].release_date).to.eql(\"2023-10-31\");\r",
							"    //  la fel nu ai dat calea din ierarhie dar in acelasi timp eu nu am gasit niciun release_date cu 01.10.2015. Cred ca acest element difera la fiecare request asa ca acest test este posibil sa iti dea eroare chiar daca dai calea corecta. Calea corecta este jsonData.episodes.items[0].release_date\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the body text of the presentation include:  Riddarholmskanalen i Stockholm.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Riddarholmskanalen i Stockholm\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"shows",
						"38bS44xjbVVZ3No3ByF1dJ"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Several Shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the name of the album is: Without Fail\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shows[0].name).to.include(\"Without Fail\");//ierarhia , nu ai specificat obiectul shows\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the name of the publisher is: Gimlet\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shows[0].publisher).to.include(\"Gimlet\");//ca mai sus\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/shows?ids=5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ&market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"shows"
					],
					"query": [
						{
							"key": "ids",
							"value": "5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ"
						},
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Track",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the album type is:  single. :))\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.album.album_type).to.include(\"single\");\r",
							"    // Nu ai specificat obiectul album. Vezi ierarhia.\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the name of the album is: Cut To The Feeling\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.album.name).to.include(\"Cut To The Feeling\");\r",
							"    // la fel ca mai sus...\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the release date is: 2017-05-26\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.album.release_date).to.include(\"2017-05-26\");\r",
							"    // la fel ca mai sus...\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/tracks/11dFghVXANMlKmJXsNCbNl?market=ES",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"tracks",
						"11dFghVXANMlKmJXsNCbNl"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Several Tracks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms.\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the album is:  playable. :))\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks[0].album.is_playable).to.eql(true);\r",
							"    // din cale lipsea obiectul tracks[0]\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify the name of the album is: Absolution\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tracks[2].album.name).to.include(\"Absolution\");//din cale lipsea tracks si album. Am pus tracks[2] pt ca numele 'Absolution' se afala pe al treilea obiect album al listei tracks\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenSpotify}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.spotify.com/v1/tracks?market=ES&ids=7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B",
					"protocol": "https",
					"host": [
						"api",
						"spotify",
						"com"
					],
					"path": [
						"v1",
						"tracks"
					],
					"query": [
						{
							"key": "market",
							"value": "ES"
						},
						{
							"key": "ids",
							"value": "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "spotify_url",
			"value": "https://accounts.spotify.com",
			"type": "string"
		},
		{
			"key": "tokenSpotify",
			"value": ""
		},
		{
			"key": "tokenSpotify_user",
			"value": "",
			"type": "string"
		}
	]
}